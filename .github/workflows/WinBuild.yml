name: Windows Build

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.12'
          architecture: 'x64'
          
      - name: Install requirements
        run: |
          pip install -r requirements.txt
          
      - name: Run PyInstaller
        run: |
          python -m PyInstaller main.spec

      - uses: actions/upload-artifact@v2
        with:
          name: Windows_Build
          path: dist/main.exe

      - name: Fetch all tags
        run: |
          git fetch --tags

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag: $latest_tag"
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Increment version
        id: increment_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          if [[ $latest_tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            version=${latest_tag:1}
            IFS='.' read -ra parts <<< "$version"
            parts[2]=$((parts[2]+1))
            new_version="v${parts[0]}.${parts[1]}.${parts[2]}"
          else
            new_version="v0.0.1"
          fi
          echo "New version: $new_version"
          echo "::set-output name=new_version::$new_version"

      - name: Create new tag
        run: |
          new_version=${{ steps.increment_version.outputs.new_version }}
          git tag $new_version
          git push origin $new_version

      - name: Get PR Body
        id: get_pr_body
        uses: actions/github-script@v3
        with:
          script: |
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            return pr.data.body;
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.increment_version.outputs.new_version }}
          release_name: "Release ${{ steps.increment_version.outputs.new_version }}"
          body: ${{ steps.get_pr_body.outputs.result }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/main.exe
          asset_name: vrc-osc-contact-velocity.exe
          asset_content_type: application/zip
